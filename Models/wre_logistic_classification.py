# -*- coding: utf-8 -*-
"""WRE-Logistic_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19jqHzGAJr3BgNByLicGpwW7SIaMcmme-

### Libraries
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

"""### Data Pre-Processing"""

# Load dataset
df = pd.read_csv('final_rainfall_sst_drought_classification.csv')

df

def explore_data(df):
    """Basic data exploration"""
    print("=== Data Summary ===")
    print(f"Time range: {df['year'].min()}-{df['year'].max()}")
    print(f"Missing values:\n{df.isnull().sum()}")
    print("\nStatistical Summary:")
    print(df[features + ['Drought_Category_Encoded']].describe())
    print("\nClass Distribution:")
    print(df['Drought_Category_Encoded'].value_counts())

explore_data(df)

# Define time lags for SST indices
lags = {
    'nino3': 4,
    'nino3.4': 3,
    'nino4': 3,
    'Arabian_Sea': 2,
    'equatorialindianocean': 3,
    'bayofbengal': 3
}

# Apply time lags to SST features
for col, lag in lags.items():
    df[col] = df[col].shift(lag)

# Create 2-month ahead target
df['future_drought'] = df['Drought_Category_Encoded'].shift(-2)
df = df.dropna().reset_index(drop=True)

# Select features and target
features = ['nino3', 'nino3.4', 'nino4', 'Arabian_Sea',
            'equatorialindianocean', 'bayofbengal', 'Average Rainfall']
X = df[features]
y = df['future_drought']

# Time-series split
train_size = int(0.8 * len(df))
X_train, X_test = X.iloc[:train_size], X.iloc[train_size:]
y_train, y_test = y.iloc[:train_size], y.iloc[train_size:]

# Create pipeline
model = make_pipeline(
    StandardScaler(),
    LogisticRegression(multi_class='multinomial',
                      solver='saga',
                      max_iter=1000,
                      random_state=42)
)

"""### Data Visualisation and Understanding"""

def plot_ts_features(df):
    """Plot time series of key features"""
    plt.figure(figsize=(15,8))
    for i, feature in enumerate(features, 1):
        plt.subplot(3,3,i)
        sns.lineplot(data=df, x='year', y=feature)
        plt.title(f'{feature} Trend')
    plt.tight_layout()
    plt.show()

plot_ts_features(df)

def plot_correlation(df):
    """Plot feature correlation matrix"""
    plt.figure(figsize=(12,8))
    corr = df[features + ['Drought_Category_Encoded']].corr()
    sns.heatmap(corr, annot=True, cmap='coolwarm')
    plt.title("Feature Correlation Matrix")
    plt.show()

plot_correlation(df)

X_train

y_train

"""### Model Training"""

# Train model
model.fit(X_train, y_train)

# Evaluate performance
y_pred = model.predict(X_test)

print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Predict drought for next 2 months using latest data
latest_sst_data = X.iloc[[-1]]  # Most recent lag-adjusted observations
predicted_category = model.predict(latest_sst_data)
probabilities = model.predict_proba(latest_sst_data)[0]

print(f"\nPredicted Drought Category (2 months ahead): {predicted_category[0]}")
print("Category Probabilities:", dict(zip(model.classes_, probabilities)))

# Feature Importance Analysis (using coefficients)
coefficients = model.named_steps['logisticregression'].coef_
print("\nFeature Importance:")
for feature, coef in zip(features, coefficients[0]):
    print(f"{feature}: {coef:.3f}")

"""### Results"""

print("Model Performance:")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

def plot_class_distribution(y_true, y_pred):
    """Compare actual vs predicted distribution"""
    fig, ax = plt.subplots(1,2, figsize=(14,5))
    sns.countplot(x=y_true, ax=ax[0], palette='Blues')
    ax[0].set_title('Actual Drought Distribution')
    sns.countplot(x=y_pred, ax=ax[1], palette='Oranges')
    ax[1].set_title('Predicted Drought Distribution')
    plt.show()

plot_class_distribution(y_test, predictions)

def plot_actual_vs_predicted(y_test, predictions):
    """Time series comparison plot"""
    plt.figure(figsize=(15,5))
    plt.plot(y_test.values, label='Actual', marker='o')
    plt.plot(predictions, label='Predicted', linestyle='--', marker='x')
    plt.title('Actual vs Predicted Drought Categories')
    plt.xlabel('Time Step')
    plt.ylabel('Drought Category')
    plt.legend()
    plt.show()


plot_actual_vs_predicted(y_test, predictions)

def plot_prediction_probabilities(probabilities):
    """Visualize prediction probabilities"""
    plt.figure(figsize=(10,5))
    sns.barplot(x=model.classes_, y=probabilities[0], palette='viridis')
    plt.title('Drought Category Probabilities')
    plt.xlabel('Drought Category')
    plt.ylabel('Probability')
    plt.ylim(0,1)
    plt.show()

# For probability visualization of latest prediction
probabilities = model.predict_proba(latest_sst_data)
plot_prediction_probabilities(probabilities)

def plot_feature_importance(model, features):
    """Plot logistic regression coefficients"""
    coeffs = model.named_steps['logisticregression'].coef_[0]
    plt.figure(figsize=(12,6))
    sns.barplot(x=features, y=coeffs)
    plt.title('Feature Importance (Logistic Regression Coefficients)')
    plt.xticks(rotation=45)
    plt.ylabel('Coefficient Value')
    plt.show()

plot_feature_importance(model, features)

# New data template for prediction (replace values accordingly)
new_sst_data = pd.DataFrame([[
    26.5,   # nino3 (4-month lag)
    27.8,   # nino3.4 (3-month lag)
    28.2,   # nino4 (3-month lag)
    29.1,   # Arabian_Sea (2-month lag)
    28.7,   # equatorialindianocean (3-month lag)
    28.9,   # bayofbengal (3-month lag)
    150     # Current rainfall
]], columns=features)

prediction = model.predict(new_sst_data)
print(f"Predicted Drought Category: {prediction[0]}")