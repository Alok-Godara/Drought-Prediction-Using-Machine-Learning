# -*- coding: utf-8 -*-
"""WRE-Prophet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12pCyyBQy-trH9X_GWzSqKpIH5O0qZBL2
"""

import pandas as pd
import numpy as np
from prophet import Prophet
from prophet.diagnostics import cross_validation, performance_metrics
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Step 1: Load and prepare the dataset
# Replace 'your_data.csv' with your actual file name
df = pd.read_csv('dataset_final_wre.csv')

# Step 2: Data preprocessing
# Create a datetime column from year and month
df['date'] = pd.to_datetime(df[['year', 'month']].assign(day=1))

# Prophet requires specific column names: 'ds' for date and 'y' for target variable
prophet_df = df[['date', 'SPI']].rename(columns={'date': 'ds', 'SPI': 'y'})

# Step 3: Add regressors (optional but likely beneficial)
for regressor in ['Average Rainfall', 'nino3', 'nino3.4', 'nino4',
                 'Arabian_Sea', 'equatorialindianocean', 'bayofbengal']:
    prophet_df[regressor] = df[regressor]

# Step 4: Initialize and fit the Prophet model
model = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=False,
    daily_seasonality=False,
    seasonality_mode='multiplicative'  # You may need to experiment with this
)

# Add regressors to the model
for regressor in ['Average Rainfall', 'nino3', 'nino3.4', 'nino4',
                 'Arabian_Sea', 'equatorialindianocean', 'bayofbengal']:
    model.add_regressor(regressor)

# Fit the model
model.fit(prophet_df)

# Step 5: Make future predictions
# Create a future dataframe for the forecast period
future_periods = 12  # Forecasting for next 12 months, adjust as needed
future = model.make_future_dataframe(periods=future_periods, freq='M')

# Add regressor values for future periods
# This requires you to have or predict future values for these variables
# For demonstration, we'll use the last available values
for regressor in ['Average Rainfall', 'nino3', 'nino3.4', 'nino4',
                 'Arabian_Sea', 'equatorialindianocean', 'bayofbengal']:
    future[regressor] = prophet_df[regressor].iloc[-1]  # Using last value, replace with actual predictions

# Step 6: Generate forecast
forecast = model.predict(future)

# Step 7: Visualize the results
fig1 = model.plot(forecast)
plt.title('SPI Forecast')
plt.show()

# Plot components to understand trend, yearly seasonality, and regressor effects
fig2 = model.plot_components(forecast)
plt.show()

# Step 8: Evaluate model performance
# Cross-validation
cv_results = cross_validation(model, initial='730 days', period='180 days', horizon='365 days')
cv_performance = performance_metrics(cv_results)
print("Cross-validation performance metrics:")
print(cv_performance)

# Step 9: Interpret SPI values for drought conditions
# Define drought categories based on SPI values
def interpret_drought(spi):
    if spi <= -2.0:
        return "Extreme Drought"
    elif spi <= -1.5:
        return "Severe Drought"
    elif spi <= -1.0:
        return "Moderate Drought"
    elif spi <= -0.5:
        return "Mild Drought"
    elif spi < 0.5:
        return "Near Normal"
    elif spi < 1.0:
        return "Mildly Wet"
    elif spi < 1.5:
        return "Moderately Wet"
    elif spi < 2.0:
        return "Severely Wet"
    else:
        return "Extremely Wet"

# Apply drought interpretation to forecasted SPI values
forecast['drought_category'] = forecast['yhat'].apply(interpret_drought)

# Print forecast with drought categories for future periods
future_forecast = forecast[forecast['ds'] > prophet_df['ds'].max()]
print("\nFuture SPI and Drought Forecasts:")
print(future_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper', 'drought_category']])

# Step 10: Create a drought probability visualization
plt.figure(figsize=(12, 6))
plt.plot(forecast['ds'], forecast['yhat'], label='Forecasted SPI')
plt.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'],
                alpha=0.3, label='Confidence Interval')

# Add drought thresholds
plt.axhline(y=-1.0, color='orange', linestyle='--', label='Moderate Drought Threshold')
plt.axhline(y=-1.5, color='red', linestyle='--', label='Severe Drought Threshold')
plt.axhline(y=-2.0, color='darkred', linestyle='--', label='Extreme Drought Threshold')

plt.title('SPI Forecast with Drought Thresholds')
plt.xlabel('Date')
plt.ylabel('SPI')
plt.legend()
plt.grid(True)
plt.show()

